package ui

import "github/com/vybraan/snare/ui/layouts"
import "github/com/vybraan/snare/components/form"
import "github/com/vybraan/snare/components/input"
import "github/com/vybraan/snare/components/button"
import "github/com/vybraan/snare/components/progress"

templ FileManager() {
	@layouts.Base() {
		<div class="min-h-screen w-full  font-mono p-8">
			<div class="max-w-4xl mx-auto border border-border rounded-lg shadow-xl p-6 ">
				<h1 class="text-3xl font-bold mb-6 border-b border-border pb-2">File Manager</h1>
				<!-- Upload Form with Progress -->
				<form
					id="uploadForm"
					onsubmit="UploadFile(event)"
					class="flex items-center gap-4 mb-4"
				>
					@form.Item() {
						@input.Input(input.Props{ID: "fileInput", Name: "file", Type: input.TypeFile})
					}
					@button.Button(button.Props{Type: button.TypeSubmit}) {
						Upload
					}
				</form>
				<!-- Upload Progress Bar using templUI -->
				<div id="progressContainer" class="w-full max-w-xl mb-6 hidden">
					@progress.Progress(progress.Props{
						Value:     0,
						Label:     "Uploading...",
						ShowValue: true,
					})
				</div>
				<!-- Toast for Notifications -->
				<div id="toast"></div>
				<!-- Files List -->
				<div class="flex justify-between items-center mb-4">
					<h2 class="text-xl font-semibold">Uploaded Files</h2>
					@button.Button(button.Props{HxGet: "files", HxTarget: "#files", HxTrigger: "click"}) {
						Refresh
					}
				</div>
				<div id="files" hx-get="/files" hx-trigger="load" hx-swap="innerHTML">
					<p>Loading files...</p>
				</div>
			</div>
		</div>
		<script>
function UploadFile(event) {
    event.preventDefault();

    const fileInput = document.getElementById('fileInput');
    if (!fileInput.files.length) {
        alert('Please select a file to upload.');
        return;
    }

    // Show progress container
    const progressContainer = document.getElementById('progressContainer');
    progressContainer.classList.remove('hidden');

    // Reset progress bar & text
    const progressIndicator = progressContainer.querySelector('[data-progress-indicator]');
    const percentText = progressContainer.querySelector('.flex.justify-between span:nth-child(2)');
    const statusText = progressContainer.querySelector('.flex.justify-between span:nth-child(1)');

    progressIndicator.style.width = '0%';
    percentText.textContent = '0%';
    statusText.textContent = 'Uploading...';

    // Prepare form data
    const formData = new FormData();
    formData.append('file', fileInput.files[0]);

    const request = new XMLHttpRequest();

    // Progress event
    request.upload.addEventListener('progress', function(e) {
        if (e.lengthComputable) {
            const percent = Math.round((e.loaded / e.total) * 100);
            progressIndicator.style.width = percent + '%';
            percentText.textContent = percent + '%';
        }
    });

    // Load event (upload complete)
    request.onload = function () {
        const toast = document.getElementById('toast');

        if (request.status === 200) {
            // Success feedback
            statusText.textContent = 'Upload Complete';
            progressIndicator.style.width = '100%';
            percentText.textContent = '100%';

            toast.innerHTML = `<div class="p-3 rounded border border-border">` + 
                request.responseText + 
                `</div>`;

                console.log(request.responseText)

            // Clear file input
            fileInput.value = '';

            // Refresh file list via HTMX
            htmx.ajax("GET", "/files", { target: "#files" });

            // Auto-hide toast after 5 seconds
            setTimeout(() => {
                progressContainer.classList.add('hidden');
                toast.innerHTML = '';
                toast.classList = '';
                //toast.innerHTML = '';
            }, 5000);

        } else {
            // Error feedback
            toast.innerHTML = `<div class="p-3 rounded bg-red-100 text-red-800 border border-red-300">` +
                `Upload failed with status ${request.status}. Please try again.` +
                `</div>`;
        }
    };

    // Error handling (network errors)
    request.onerror = function () {
        const toast = document.getElementById('toast');
        toast.innerHTML = `<div class="p-3 rounded bg-red-100 text-red-800 border border-red-300">` +
            `Network error. Please check your connection and try again.` +
            `</div>`;
    };

    // Open and send request
    request.open('POST', '/upload', true);
    request.timeout = 45000; // 45 seconds timeout
    request.send(formData);
}
</script>
	}
}
